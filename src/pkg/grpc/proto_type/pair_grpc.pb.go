// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pair.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PairProtoService_GetPairs_FullMethodName         = "/pair.PairProtoService/GetPairs"
	PairProtoService_GetPair_FullMethodName          = "/pair.PairProtoService/GetPair"
	PairProtoService_PostPair_FullMethodName         = "/pair.PairProtoService/PostPair"
	PairProtoService_PutPair_FullMethodName          = "/pair.PairProtoService/PutPair"
	PairProtoService_DeletePair_FullMethodName       = "/pair.PairProtoService/DeletePair"
	PairProtoService_PostValidatePair_FullMethodName = "/pair.PairProtoService/PostValidatePair"
)

// PairProtoServiceClient is the client API for PairProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Pair service definition
type PairProtoServiceClient interface {
	// Add your trading pair service methods here
	GetPairs(ctx context.Context, in *GetPairsRequest, opts ...grpc.CallOption) (*GetPairsResponse, error)
	GetPair(ctx context.Context, in *GetPairRequest, opts ...grpc.CallOption) (*GetPairResponse, error)
	PostPair(ctx context.Context, in *PostPairRequest, opts ...grpc.CallOption) (*PostPairResponse, error)
	PutPair(ctx context.Context, in *PutPairRequest, opts ...grpc.CallOption) (*PutPairResponse, error)
	DeletePair(ctx context.Context, in *DeletePairRequest, opts ...grpc.CallOption) (*DeletePairResponse, error)
	PostValidatePair(ctx context.Context, in *PostValidatePairRequest, opts ...grpc.CallOption) (*PostValidatePairResponse, error)
}

type pairProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPairProtoServiceClient(cc grpc.ClientConnInterface) PairProtoServiceClient {
	return &pairProtoServiceClient{cc}
}

func (c *pairProtoServiceClient) GetPairs(ctx context.Context, in *GetPairsRequest, opts ...grpc.CallOption) (*GetPairsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPairsResponse)
	err := c.cc.Invoke(ctx, PairProtoService_GetPairs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairProtoServiceClient) GetPair(ctx context.Context, in *GetPairRequest, opts ...grpc.CallOption) (*GetPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPairResponse)
	err := c.cc.Invoke(ctx, PairProtoService_GetPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairProtoServiceClient) PostPair(ctx context.Context, in *PostPairRequest, opts ...grpc.CallOption) (*PostPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostPairResponse)
	err := c.cc.Invoke(ctx, PairProtoService_PostPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairProtoServiceClient) PutPair(ctx context.Context, in *PutPairRequest, opts ...grpc.CallOption) (*PutPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutPairResponse)
	err := c.cc.Invoke(ctx, PairProtoService_PutPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairProtoServiceClient) DeletePair(ctx context.Context, in *DeletePairRequest, opts ...grpc.CallOption) (*DeletePairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePairResponse)
	err := c.cc.Invoke(ctx, PairProtoService_DeletePair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pairProtoServiceClient) PostValidatePair(ctx context.Context, in *PostValidatePairRequest, opts ...grpc.CallOption) (*PostValidatePairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostValidatePairResponse)
	err := c.cc.Invoke(ctx, PairProtoService_PostValidatePair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PairProtoServiceServer is the server API for PairProtoService service.
// All implementations must embed UnimplementedPairProtoServiceServer
// for forward compatibility.
//
// Pair service definition
type PairProtoServiceServer interface {
	// Add your trading pair service methods here
	GetPairs(context.Context, *GetPairsRequest) (*GetPairsResponse, error)
	GetPair(context.Context, *GetPairRequest) (*GetPairResponse, error)
	PostPair(context.Context, *PostPairRequest) (*PostPairResponse, error)
	PutPair(context.Context, *PutPairRequest) (*PutPairResponse, error)
	DeletePair(context.Context, *DeletePairRequest) (*DeletePairResponse, error)
	PostValidatePair(context.Context, *PostValidatePairRequest) (*PostValidatePairResponse, error)
	mustEmbedUnimplementedPairProtoServiceServer()
}

// UnimplementedPairProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPairProtoServiceServer struct{}

func (UnimplementedPairProtoServiceServer) GetPairs(context.Context, *GetPairsRequest) (*GetPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairs not implemented")
}
func (UnimplementedPairProtoServiceServer) GetPair(context.Context, *GetPairRequest) (*GetPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPair not implemented")
}
func (UnimplementedPairProtoServiceServer) PostPair(context.Context, *PostPairRequest) (*PostPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPair not implemented")
}
func (UnimplementedPairProtoServiceServer) PutPair(context.Context, *PutPairRequest) (*PutPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPair not implemented")
}
func (UnimplementedPairProtoServiceServer) DeletePair(context.Context, *DeletePairRequest) (*DeletePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePair not implemented")
}
func (UnimplementedPairProtoServiceServer) PostValidatePair(context.Context, *PostValidatePairRequest) (*PostValidatePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostValidatePair not implemented")
}
func (UnimplementedPairProtoServiceServer) mustEmbedUnimplementedPairProtoServiceServer() {}
func (UnimplementedPairProtoServiceServer) testEmbeddedByValue()                          {}

// UnsafePairProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PairProtoServiceServer will
// result in compilation errors.
type UnsafePairProtoServiceServer interface {
	mustEmbedUnimplementedPairProtoServiceServer()
}

func RegisterPairProtoServiceServer(s grpc.ServiceRegistrar, srv PairProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedPairProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PairProtoService_ServiceDesc, srv)
}

func _PairProtoService_GetPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairProtoServiceServer).GetPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PairProtoService_GetPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairProtoServiceServer).GetPairs(ctx, req.(*GetPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairProtoService_GetPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairProtoServiceServer).GetPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PairProtoService_GetPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairProtoServiceServer).GetPair(ctx, req.(*GetPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairProtoService_PostPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairProtoServiceServer).PostPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PairProtoService_PostPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairProtoServiceServer).PostPair(ctx, req.(*PostPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairProtoService_PutPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairProtoServiceServer).PutPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PairProtoService_PutPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairProtoServiceServer).PutPair(ctx, req.(*PutPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairProtoService_DeletePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairProtoServiceServer).DeletePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PairProtoService_DeletePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairProtoServiceServer).DeletePair(ctx, req.(*DeletePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PairProtoService_PostValidatePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostValidatePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PairProtoServiceServer).PostValidatePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PairProtoService_PostValidatePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PairProtoServiceServer).PostValidatePair(ctx, req.(*PostValidatePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PairProtoService_ServiceDesc is the grpc.ServiceDesc for PairProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PairProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pair.PairProtoService",
	HandlerType: (*PairProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPairs",
			Handler:    _PairProtoService_GetPairs_Handler,
		},
		{
			MethodName: "GetPair",
			Handler:    _PairProtoService_GetPair_Handler,
		},
		{
			MethodName: "PostPair",
			Handler:    _PairProtoService_PostPair_Handler,
		},
		{
			MethodName: "PutPair",
			Handler:    _PairProtoService_PutPair_Handler,
		},
		{
			MethodName: "DeletePair",
			Handler:    _PairProtoService_DeletePair_Handler,
		},
		{
			MethodName: "PostValidatePair",
			Handler:    _PairProtoService_PostValidatePair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pair.proto",
}
