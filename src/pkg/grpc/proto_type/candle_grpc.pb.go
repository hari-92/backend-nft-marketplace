// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: candle.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CandleProtoService_GetCandles_FullMethodName          = "/candle.CandleProtoService/GetCandles"
	CandleProtoService_GetCandleStats_FullMethodName      = "/candle.CandleProtoService/GetCandleStats"
	CandleProtoService_GetCandleLatest_FullMethodName     = "/candle.CandleProtoService/GetCandleLatest"
	CandleProtoService_PostCandleValidate_FullMethodName  = "/candle.CandleProtoService/PostCandleValidate"
	CandleProtoService_GetCandlesAggregate_FullMethodName = "/candle.CandleProtoService/GetCandlesAggregate"
)

// CandleProtoServiceClient is the client API for CandleProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Candle service definition
type CandleProtoServiceClient interface {
	GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error)
	GetCandleStats(ctx context.Context, in *GetCandleStatsRequest, opts ...grpc.CallOption) (*GetCandleStatsResponse, error)
	GetCandleLatest(ctx context.Context, in *GetCandleLatestRequest, opts ...grpc.CallOption) (*GetCandleLatestResponse, error)
	PostCandleValidate(ctx context.Context, in *PostCandleValidateRequest, opts ...grpc.CallOption) (*PostCandleValidateResponse, error)
	GetCandlesAggregate(ctx context.Context, in *GetCandlesAggregateRequest, opts ...grpc.CallOption) (*GetCandlesAggregateResponse, error)
}

type candleProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandleProtoServiceClient(cc grpc.ClientConnInterface) CandleProtoServiceClient {
	return &candleProtoServiceClient{cc}
}

func (c *candleProtoServiceClient) GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandlesResponse)
	err := c.cc.Invoke(ctx, CandleProtoService_GetCandles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candleProtoServiceClient) GetCandleStats(ctx context.Context, in *GetCandleStatsRequest, opts ...grpc.CallOption) (*GetCandleStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandleStatsResponse)
	err := c.cc.Invoke(ctx, CandleProtoService_GetCandleStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candleProtoServiceClient) GetCandleLatest(ctx context.Context, in *GetCandleLatestRequest, opts ...grpc.CallOption) (*GetCandleLatestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandleLatestResponse)
	err := c.cc.Invoke(ctx, CandleProtoService_GetCandleLatest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candleProtoServiceClient) PostCandleValidate(ctx context.Context, in *PostCandleValidateRequest, opts ...grpc.CallOption) (*PostCandleValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCandleValidateResponse)
	err := c.cc.Invoke(ctx, CandleProtoService_PostCandleValidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candleProtoServiceClient) GetCandlesAggregate(ctx context.Context, in *GetCandlesAggregateRequest, opts ...grpc.CallOption) (*GetCandlesAggregateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandlesAggregateResponse)
	err := c.cc.Invoke(ctx, CandleProtoService_GetCandlesAggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandleProtoServiceServer is the server API for CandleProtoService service.
// All implementations must embed UnimplementedCandleProtoServiceServer
// for forward compatibility.
//
// Candle service definition
type CandleProtoServiceServer interface {
	GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error)
	GetCandleStats(context.Context, *GetCandleStatsRequest) (*GetCandleStatsResponse, error)
	GetCandleLatest(context.Context, *GetCandleLatestRequest) (*GetCandleLatestResponse, error)
	PostCandleValidate(context.Context, *PostCandleValidateRequest) (*PostCandleValidateResponse, error)
	GetCandlesAggregate(context.Context, *GetCandlesAggregateRequest) (*GetCandlesAggregateResponse, error)
	mustEmbedUnimplementedCandleProtoServiceServer()
}

// UnimplementedCandleProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCandleProtoServiceServer struct{}

func (UnimplementedCandleProtoServiceServer) GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedCandleProtoServiceServer) GetCandleStats(context.Context, *GetCandleStatsRequest) (*GetCandleStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandleStats not implemented")
}
func (UnimplementedCandleProtoServiceServer) GetCandleLatest(context.Context, *GetCandleLatestRequest) (*GetCandleLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandleLatest not implemented")
}
func (UnimplementedCandleProtoServiceServer) PostCandleValidate(context.Context, *PostCandleValidateRequest) (*PostCandleValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCandleValidate not implemented")
}
func (UnimplementedCandleProtoServiceServer) GetCandlesAggregate(context.Context, *GetCandlesAggregateRequest) (*GetCandlesAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandlesAggregate not implemented")
}
func (UnimplementedCandleProtoServiceServer) mustEmbedUnimplementedCandleProtoServiceServer() {}
func (UnimplementedCandleProtoServiceServer) testEmbeddedByValue()                            {}

// UnsafeCandleProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandleProtoServiceServer will
// result in compilation errors.
type UnsafeCandleProtoServiceServer interface {
	mustEmbedUnimplementedCandleProtoServiceServer()
}

func RegisterCandleProtoServiceServer(s grpc.ServiceRegistrar, srv CandleProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedCandleProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CandleProtoService_ServiceDesc, srv)
}

func _CandleProtoService_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandleProtoServiceServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandleProtoService_GetCandles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandleProtoServiceServer).GetCandles(ctx, req.(*GetCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandleProtoService_GetCandleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandleStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandleProtoServiceServer).GetCandleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandleProtoService_GetCandleStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandleProtoServiceServer).GetCandleStats(ctx, req.(*GetCandleStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandleProtoService_GetCandleLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandleLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandleProtoServiceServer).GetCandleLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandleProtoService_GetCandleLatest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandleProtoServiceServer).GetCandleLatest(ctx, req.(*GetCandleLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandleProtoService_PostCandleValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCandleValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandleProtoServiceServer).PostCandleValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandleProtoService_PostCandleValidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandleProtoServiceServer).PostCandleValidate(ctx, req.(*PostCandleValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandleProtoService_GetCandlesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandleProtoServiceServer).GetCandlesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandleProtoService_GetCandlesAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandleProtoServiceServer).GetCandlesAggregate(ctx, req.(*GetCandlesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandleProtoService_ServiceDesc is the grpc.ServiceDesc for CandleProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandleProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candle.CandleProtoService",
	HandlerType: (*CandleProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandles",
			Handler:    _CandleProtoService_GetCandles_Handler,
		},
		{
			MethodName: "GetCandleStats",
			Handler:    _CandleProtoService_GetCandleStats_Handler,
		},
		{
			MethodName: "GetCandleLatest",
			Handler:    _CandleProtoService_GetCandleLatest_Handler,
		},
		{
			MethodName: "PostCandleValidate",
			Handler:    _CandleProtoService_PostCandleValidate_Handler,
		},
		{
			MethodName: "GetCandlesAggregate",
			Handler:    _CandleProtoService_GetCandlesAggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "candle.proto",
}
